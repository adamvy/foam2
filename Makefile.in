#Configuration variables set by configure script

abs_srcdir = @abs_srcdir@
abs_top_srcdir = @abs_top_srcdir@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
abs_builddir = @abs_builddir@
prefix = @prefix@
exec_prefix = @exec_prefix@
builddir = @builddir@
bindir = @bindir@
libdir = @libdir@
sbindir = @sbindir@
datarootdir = @datarootdir@
datadir = @datadir@
pkgdatadir = @datadir@/@PACKAGE_NAME@
localstatedir = @localstatedir@
pkglocalstatedir = @localstatedir@/@PACKAGE_NAME@
sharedstatedir = @sharedstatedir@
pkglibdir = @libdir@/@PACKAGE_NAME@
BASH_REAL = @BASH_REAL@
NODE = @NODE@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
WGET = @WGET@
MKDIR_P = @MKDIR_P@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAR = @JAR@
SED = @SED@

SHA1_sha1sum = sha1sum $(1) | cut -d' ' -f1
SHA1_shasum = shasum -a 1 $(1) | cut -d' ' -f1
SHA1_openssl = openssl dgst -r -sha1 $(1) | -d' ' -f1
SHA1_sha1 = sha1 -q $(1)

SHA1 = $(SHA1_@AVAILABLE_SHA1SUM@)


nanos_SRC_DIR = $(srcdir)/src
nanos_CLASSES = $(srcdir)/tools/classes.js

# Format for dependencies from maven is
# <groupId>:<artifactId>:<version>
nanos_MAVEN_DEPS = \
	javax.json:javax.json-api:1.0 \
	javax.mail:mail:1.4.7 \
	javax.mail:javax.mail-api:1.5.5 \
	javax.servlet:javax.servlet-api:3.1.0 \
	javax.websocket:javax.websocket-api:1.1 \
	jstl:jstl:1.2 \
	org.apache.commons:commons-text:1.1 \
	org.apache.commons:commons-dbcp2:2.0.1 \
	org.apache.commons:commons-lang3:3.6 \
	commons-io:commons-io:2.6 \
	org.apache-extras.beanshell:bsh:2.0b6 \
	com.google.api-client:google-api-client:1.22.0 \
	org.jtwig:jtwig-core:5.86.1.RELEASE \
	org.mongodb:mongodb-driver:3.4.2 \
	org.mongodb:mongodb-driver-core:3.4.2 \
	org.mongodb:bson:3.4.2 \
	org.postgresql:postgresql:42.0.0 \
	org.java-websocket:Java-WebSocket:1.3.4 \
	com.authy:authy-java:1.1.0 \
	org.bouncycastle:bcpkix-jdk15on:1.57 \
	org.bouncycastle:bcprov-jdk15on:1.57 \
	org.java-websocket:Java-WebSocket:1.3.7 \
	com.google.guava:guava:23.6-jre \
	com.google.appengine:appengine-api-1.0-sdk:1.9.24

lib_JARS = nanos
sbin_PROGRAMS = nanos

foam_genjava = $(NODE) $(srcdir)/tools/genjava2.js

java_dep_dir = $(builddir)/lib
abs_java_dep_dir = $(abspath $(java_dep_dir))

MAVEN_BASE_URL ?= http://central.maven.org/maven2

empty :=
space := $(empty) $(empty)
#split <string> <separator>
split = $(subst $(2),$(space),$(1))

java_dep_version = $(word 3,$(call split,$(1),:))
java_dep_artifact = $(word 2,$(call split,$(1),:))
java_dep_group = $(word 1,$(call split,$(1),:))
java_dep_jar = $(call java_dep_artifact,$(1))-$(call java_dep_version,$(1)).jar
java_dep_sha1 = $(call java_dep_jar,$(1)).sha1
java_dep_jar_url = $(MAVEN_BASE_URL)/$(subst .,/,$(call java_dep_group,$(1)))/$(call java_dep_artifact,$(1))/$(call java_dep_version,$(1))/$(call java_dep_jar,$(1))
java_dep_sha1_url = $(MAVEN_BASE_URL)/$(subst .,/,$(call java_dep_group,$(1)))/$(call java_dep_artifact,$(1))/$(call java_dep_version,$(1))/$(call java_dep_sha1,$(1))

all:

$(java_dep_dir):
	$(MKDIR_P) $@

BUNDLED_LIBS =

define MAVEN_DEP_template

BUNDLED_LIBS += $(java_dep_dir)/$(call java_dep_jar,$(1))
$(2)_JAVA_LIBS += $(java_dep_dir)/$(call java_dep_jar,$(1))

$(java_dep_dir)/$(call java_dep_jar,$(1)): | $(java_dep_dir)
	$$(WGET) -O $(java_dep_dir)/$(call java_dep_sha1,$(1)) $(call java_dep_sha1_url,$(1))
	$$(WGET) -O $$@ $(call java_dep_jar_url,$(1))
	if test `$(call SHA1,$$@)` != `cat $(java_dep_dir)/$(call java_dep_sha1,$(1))`; then \
	  echo "ERROR: Download did not match sha1 checksum." ; \
	  exit 1 ; \
	fi


endef

JARS =

define JAVA_JAR_template

$(1)_JAVA_LIBS ?=
$(1)_JAVA_SRCS = $$(shell find $$($(1)_SRC_DIR) -type f -iname '*.java')
$(1)_JS_SRCS = $$(shell find $$($(1)_SRC_DIR) -type f -iname '*.js')
$(1)_WEB_DATA = $$(shell find $$($(1)_SRC_DIR) -type f -iname '*.js' -o -iname '*.css' -o -iname '*.html' -o -iname '*.json')
$(1)_ALL_SRCS = $$($(1)_JAVA_SRCS) $$($(1)_JS_SRCS)
$(1)_GEN_SRC_DIR = $(1)-gensrcs
$(1)_BUILD_DIR = $(1)-build
$(1)_GEN_SRCS = $$(shell find $$($(1)_GEN_SRC_DIR) -type f -iname '*.java')
$(1)_JAR = $(1).jar
$(1)_DEV_CLASSPATH = $$(subst $$(space),:,$$(foreach lib,$$($(1)_JAVA_LIBS),$$(abspath $$(lib))))
$(1)_INSTALL_CLASSPATH = $$(subst $$(space),:,$$(foreach lib,$$($(1)_JAVA_LIBS),$$(pkglibdir)/$$(notdir $$(lib))))
$(1)_SRC_HASH := $$($(1)_GEN_SRC_DIR)/.srchash-$$(shell cat $$($(1)_JS_SRCS) $$($(1)_JAVA_SRCS) | $$(call SHA1,/dev/stdin))
JARS += $(1).jar

$$($(1)_GEN_SRC_DIR):
	$$(MKDIR_P) $$@

$$($(1)_BUILD_DIR):
	$$(MKDIR_P) $$@

$$($(1)_SRC_HASH): | $$($(1)_GEN_SRC_DIR)
	find $$($(1)_GEN_SRC_DIR) -maxdepth 1 -type f -iname '.srchash-*' -delete
	find $$($(1)_GEN_SRC_DIR) -type f -iname '*.java' -delete
	$$(foam_genjava) $$($(1)_CLASSES) $$($(1)_GEN_SRC_DIR) $$($(1)_SRC_DIR)
	touch $$@

.PHONY: clean-$(1)-gensrcs

clean-$(1)-gensrcs:
	-rm -rf $$($(1)_GEN_SRC_DIR)

clean: clean-$(1)-gensrcs

.PHONY: clean-$(1)-jar

clean-$(1)-jar: clean-$(1)-gensrcs
	-rm -f $$($(1)_JAR)

clean: clean-$(1)-jar

$(foreach dep,$($(1)_MAVEN_DEPS),$(call MAVEN_DEP_template,$(dep),$(1)))

.PHONY: clean-$(1)-deps

clean-$(1)-deps:
	rm -f $(foreach dep,$($(1)_MAVEN_DEPS),$(java_dep_dir)/$(call java_dep_jar,$(dep)))

clean: clean-$(1)-deps

$$($(1)_JAR): $$($(1)_SRC_HASH) $$($(1)_JAVA_SRCS) $$($(1)_JAVA_LIBS) | $$($(1)_BUILD_DIR) $$(BUILD_DIR)
	find $$($(1)_BUILD_DIR) -type f -iname '*.class' -delete
	@echo "Compiling..."
	@$$(JAVAC) $$(JAVACFLAGS) -d $$($(1)_BUILD_DIR) -cp $$($(1)_DEV_CLASSPATH) $$($(1)_JAVA_SRCS) $$($(1)_GEN_SRCS)
	@echo "Packaging..."
	$$(JAR) cvf $$@ -C $$($(1)_BUILD_DIR) .

.PHONY: install-web-data-$(1)

install-web-data-$(1): $$($(1)_WEB_DATA)
	@list='$$($(1)_WEB_DATA)'; test -n "$$(pkgdatadir)" || list=; \
	if test -n "$$$$list"; then \
	  echo $$(MKDIR_P) '$$(DESTDIR)$$(pkgdatadir)' || exit 1; \
	fi ; \
	for srcfile in $$$$list; do \
	  dst=`echo "$$$$srcfile" | $$(SED) -e 's|$$($(1)_SRC_DIR)||'`; \
	  $$(MKDIR_P) `dirname "$$(DESTDIR)$$(pkgdatadir)$$$$dst"` || exit $?; \
	  echo $$(INSTALL_DATA) "$$$$srcfile" "$$(DESTDIR)$$(pkgdatadir)$$$$dst"; \
	  $$(INSTALL_DATA) "$$$$srcfile" "$$(DESTDIR)$$(pkgdatadir)$$$$dst" || exit $?; \
	done

endef

define launcher_template
#!$(BASH_REAL)

DEBUG=n
SUSPEND=n
DEBUG_PORT=8000

DATADIR=
WEBROOT=

function usage {
    echo "Usage: $$0 [OPTIONS] [NANOS_OPTIONS]"
    echo ""
    echo "Options:"
    echo " -d Enable JPDA debugging"
    echo " -s When debugging is enabled, start with application suspended."
    echo " -a PORT Listen on PORT for debugger connections, default 8000"
    echo " -j JAR1:JAR2 Additional jars to add to the classpath."
    echo ""
    echo "Nanos Options:"
    # TODO: Let nanos output these itself.
    echo ""
    echo " --datadir DATADIR Look for data files in DATADIR rather than current"
    echo "   working directory."
    echo " --webroot WEBROOT The default FileWebAgent will serve files from here"
    echo "   if specified, otherwise it will serve from the current directory."
    echo ""
}

while getopts ":da:shj:" opt; do
    case $$opt in
        d) DEBUG=y ;;
        s) SUSPEND=y ;;
        a) DEBUG_PORT=$$OPTARG ;;
        j) EXTRA_CP=":$$OPTARG" ;;
        h) usage ; exit 0 ;;
        ?) break ;;
    esac
done

DEBUG_ARGS=

if test "$$DEBUG" = y; then
    DEBUG_ARGS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=$${SUSPEND},address=$${DEBUG_PORT}"
fi

NANOS_ARGS=

if test -n "$$DATADIR"; then
  NANOS_ARGS="--datadir $$DATADIR"
fi

if test -n "$$WEBROOT"; then
  NANOS_ARGS="$$NANOS_ARGS --webroot $$WEBROOT"
fi

shift $$(($$OPTIND - 1))

java $$DEBUG_ARGS -cp $(1):$$EXTRA_CP foam.nanos.boot.Boot $$NANOS_ARGS "$$@"

endef


SCRIPTS =

define java_program_template

SCRIPTS += $(1)

$(1): $$($(1)_JAR)
	@echo "Building launcher script..."
	$$(file >$$@,$$(call launcher_template,$$(abspath $$($(1)_JAR)):$$($(1)_DEV_CLASSPATH)))
	chmod +x $$@

.PHONY: clean-$(1) install-sbin-$(1)

install-sbin-$(1): $(1)
	$$(MKDIR_P) "$$(DESTDIR)$$(sbindir)"
	$$(INSTALL_SCRIPT) $$< "$$(DESTDIR)$$(sbindir)"
	$$(SED) -e 's#\($$(abs_java_dep_dir)\|$$(abs_builddir)\)#$$(pkglibdir)#g' \
	        -e 's#DATADIR=#DATADIR=$$(pkglocalstatedir)#g' \
	        -e 's#WEBROOT=#WEBROOT=$$(pkgdatadir)#g' \
	        -i "$$(DESTDIR)$$(sbindir)/$(1)"

clean-$(1):
	rm -f $$@

clean: clean-$(1)

endef

$(foreach jar,$(lib_JARS),$(eval $(call JAVA_JAR_template,$(jar))))
$(foreach prog,$(sbin_PROGRAMS),$(eval $(call java_program_template,$(prog))))

all: bin/foam nanos

bin/foam: $(srcdir)/bin/foam.in
	$(MKDIR_P) $(builddir)/bin
	$(SED) -e 's|@BASH_REAL[@]|$(BASH_REAL)|g' \
	       -e 's|@NODE[@]|$(NODE)|g' \
	       -e 's|@BOOTCLASSPATH[@]|$(abs_top_srcdir)/src/|g' \
	       < $< > $@
	chmod +x $@

.PHONY: install-bin install install-jars install-bundled-deps install-sbin-scripts install-data install-web-data install-journals

install-bin: bin/foam | install-web-data
	$(MKDIR_P) '$(DESTDIR)$(bindir)'
	$(INSTALL_SCRIPT) $< '$(DESTDIR)$(bindir)'
	$(SED) -e 's#$(abs_top_srcdir)/src#$(pkgdatadir)#g' -i '$(DESTDIR)$(bindir)/foam'

install: install-jars install-bundled-deps install-sbin-scripts install-data install-bin install-journals

install-journals: $(srcdir)/src/services
	$(MKDIR_P) '$(DESTDIR)$(pkglocalstatedir)'
	test -f '$(DESTDIR)$(pkglocalstatedir)/services' || $(INSTALL_DATA) $(srcdir)/src/services '$(DESTDIR)$(pkglocalstatedir)'

install-jars: $(JARS)
	$(MKDIR_P) "$(DESTDIR)$(pkglibdir)"
	for jar in $^; do \
	  $(INSTALL_DATA) $$jar "$(DESTDIR)$(pkglibdir)" || exit $$? ; \
	done

install-bundled-deps: $(BUNDLED_LIBS)
	$(MKDIR_P) "$(DESTDIR)$(pkglibdir)"
	for lib in $(BUNDLED_LIBS); do \
	  $(INSTALL_DATA) $$lib "$(DESTDIR)$(pkglibdir)" || exit $$? ; \
	done


install-sbin-scripts: $(foreach script,$(SCRIPTS),install-sbin-$(script))

install-data: install-web-data

install-web-data: $(foreach jar,$(lib_JARS),install-web-data-$(jar))
